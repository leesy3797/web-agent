## TODO

### 1. 상태 불러오기 시 계획 존재 여부 분기 처리
- [ ] 이전 상태에 계획이 존재하면, 계획 재수립 없이 에이전트 노드로 직행
- [ ] 이전 상태에 계획이 없으면, 계획 노드에서 신규 계획 수립 후 에이전트 노드로 이동

### 2. 에이전트 노드 토큰 사용량 최적화
- [ ] 명확화 및 계획 단계 대화 내용 에이전트 노드 입력에서 제외
- [ ] `state['messages']` 데이터 양 최소화
    - [ ] JSON 출력에 필요한 필드만 포함, 불필요 데이터로 인한 크기 증가 방지
    - [ ] `agent_state.json` 내 `messages` 크기 과도 여부 확인 및 축소 방안 모색

### 3. 계획 생성 단계 고도화
- [ ] 계획 프로세스 세분화 및 개선 방안 탐색
- [ ] 계획을 작고 세분화된 단계로 분할 시 효율성 영향 평가

### 4. 에이전트 노드 단계별 처리 및 `think_tool` 적용 검토
- [ ] 에이전트 노드가 계획에 따라 한 번에 한 단계씩 처리하는지 확인
- [ ] `think_tool` 적용 최적 시점 및 빈도 결정 (단계 완료 후 적용 시 효과 검토)

### 5. `think_tool` 활용한 계획 업데이트 메커니즘 구현
- [ ] `think_tool` 수정 내용 계획에 실시간 반영되도록 구현