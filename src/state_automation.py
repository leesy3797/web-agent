
"""
Defines the state and Pydantic schemas for the web automation planning workflow.

This module contains the data structures that manage the agent's state,
including its plan and findings, as well as schemas for structured outputs like
planning results and user clarifications.
"""

import operator
from typing_extensions import Optional, Annotated, List, Sequence, Dict, Any
from langchain_core.messages import BaseMessage, AnyMessage
from langgraph.graph import MessagesState
from langgraph.graph.message import add_messages
from pydantic import BaseModel, Field


# ===== STATE DEFINITIONS =====

class AgentInputState(MessagesState):
    """Input state for the full agent - only contains messages from user input."""
    pass

class AgentState(MessagesState):
    """
    Represents the central state for the web automation agent's workflow.

    It systematically tracks the agent's plan, execution, findings, and final outputs.
    """
    # The original user request, serving as the agent's primary objective.
    task: str

    # A complete log of the conversation between the user and the agent.
    messages: Annotated[List[AnyMessage], operator.add]

    # A multi-step execution plan generated by the 'Planner' node.
    plan: List[str]

    # A log of all executed actions and their outcomes.
    # Example:
    # - "Action: browser_navigate(url='...'), Result: Success"
    # - "Action: browser_click(selector='#btn'), Result: Element not found"
    action_history: Annotated[List[str], operator.add]

    # Stores the last tool error, enabling the agent to attempt self-correction.
    last_error: Optional[str]

    # A dictionary for storing structured data scraped or extracted from web pages.
    extracted_data: Annotated[Dict[str, Any], operator.ior]

    # The final, synthesized answer to the user's task, generated from gathered information.
    final_answer: str

    # A summary of the agent's execution process, explaining 'how' the task was completed.
    workflow_summary: str

# ===== STRUCTURED OUTPUT SCHEMAS =====

class Clarification(BaseModel):
    """
    Schema for determining if the agent needs to ask the user for more information.
    """

    need_clarification: bool = Field(
        description="Whether the agent needs to ask the user a clarifying question to proceed.",
    )
    question: str = Field(
        description="The specific question to ask the user to clarify their request.",
    )
    message_to_user: str = Field(
        description="A message informing the user that the task will begin after they provide the necessary details.",
    )

class Plan(BaseModel):
    """
    Schema for the structured multi-step plan for web automation.
    """

    steps: List[str] = Field(
        description="A detailed, step-by-step plan to execute the user's request.",
    )
